"""
Dgraph GraphQL Schema for DeepFry - Web of Trust & User Data
Based on Nostr event kinds: 0 (User Metadata), 3 (Contact List), 1984 (Report), 1985 (Label)
"""
type User {
  id: ID!

  # From Kind 0 (User Metadata) events
  pubkey: String! @search(by: [exact, term])
  name: String @search(by: [term, fulltext])
  about: String @search(by: [fulltext])
  picture: String
  metadata: String # Full content object as JSON
  userCreatedAt: DateTime @search(by: [hour])
  userUpdatedAt: DateTime @search(by: [hour])

  # From Kind 3 (Contact List) events - relationships
  follows: [User] @hasInverse(field: followers)
  followers: [User] @hasInverse(field: follows)
  followCreatedAt: DateTime

  # Reports made by this user
  reportsCreated: [Report] @hasInverse(field: reporter)

  # Reports made about this user
  reportsReceived: [Report] @hasInverse(field: reported)

  # Labels applied by this user
  labelsCreated: [Label] @hasInverse(field: labeler)

  # Labels applied to this user
  labelsReceived: [Label] @hasInverse(field: labeled)
}

type Report {
  id: ID!

  # From Kind 1984 (Report) events
  eventId: String! @search(by: [exact])
  reporter: User! @hasInverse(field: reportsCreated)
  reported: User! @hasInverse(field: reportsReceived)
  reportType: String! @search(by: [exact, term]) # "nudity", "spam", "illegal", etc
  reportContent: String @search(by: [fulltext])
  reportCreatedAt: DateTime! @search(by: [hour])
  reportUpdatedAt: DateTime @search(by: [hour])
}

type Label {
  id: ID!

  # From Kind 1985 (Label) events
  eventId: String! @search(by: [exact])
  labeler: User! @hasInverse(field: labelsCreated)
  labeled: User! @hasInverse(field: labelsReceived)
  labelValue: String! @search(by: [exact, term]) # The label value
  labelNamespace: String @search(by: [exact, term]) # Optional namespace
  labelCreatedAt: DateTime! @search(by: [hour])
  labelUpdatedAt: DateTime @search(by: [hour])
}

# Input types for mutations
input UserInput {
  pubkey: String!
  name: String
  about: String
  picture: String
  metadata: String
  userCreatedAt: DateTime
  userUpdatedAt: DateTime
}

input ReportInput {
  eventId: String!
  reporterPubkey: String!
  reportedPubkey: String!
  reportType: String!
  reportContent: String
  reportCreatedAt: DateTime!
}

input LabelInput {
  eventId: String!
  labelerPubkey: String!
  labeledPubkey: String!
  labelValue: String!
  labelNamespace: String
  labelCreatedAt: DateTime!
}
